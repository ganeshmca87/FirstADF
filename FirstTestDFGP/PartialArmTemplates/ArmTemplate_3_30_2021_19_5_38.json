{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "FirstTestDFGP"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSblobInbound",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DSblobInbound",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DSblobInbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DSblobInbound",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Src1Derived"
						},
						{
							"name": "Src2Derived"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tempid as string,\n\t\tempname as string,\n\t\tdepartment as string,\n\t\tdesignation as string,\n\t\tsalary as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['empdata2.csv']) ~> source1\nsource(output(\n\t\tempid as string,\n\t\tempname as string,\n\t\tdepartment as string,\n\t\tdesignation as string,\n\t\tsalary as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['empdata.csv']) ~> source2\nsource1 derive(IdName = md5(empid,empname)) ~> Src1Derived\nsource2 derive(IdName2 = md5(empid,empname)) ~> Src2Derived\nSrc1Derived, Src2Derived exists(IdName == IdName2,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nExists1 alterRow(insertIf(true())) ~> AlterRow1\nExists1 alterRow(updateIf(true())) ~> AlterRow2\nAlterRow1 sink(input(\n\t\tempid as string,\n\t\tempname as string,\n\t\tdepartment as string,\n\t\tdesignation as string,\n\t\tsalary as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat('Output-',toString(currentUTC('YYYYmmdd'), 'YYYYmmdd'),'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nAlterRow2 sink(input(\n\t\tempid as string,\n\t\tempname as string,\n\t\tdepartment as string,\n\t\tdesignation as string,\n\t\tsalary as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat('Output2-',toString(currentUTC('YYYYmmdd'), 'YYYYmmdd'),'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": []
		}
	]
}